
import React, { useState, useEffect } from "react";
import { useParams, useNavigate, useSearchParams } from "react-router-dom";
import { fetchWithAuth } from "../constants/api.js";
import styles from "./BookCatalogPage.module.css";

const BookCatalogPage = () => {
  const [books, setBooks] = useState([]);
  const [filteredBooks, setFilteredBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [genres, setGenres] = useState([]);
  const [selectedGenre, setSelectedGenre] = useState(null); //todo
  const [cart, setCart] = useState(new Set());
  const [selectedBook, setSelectedBook] = useState(null);
  const [rentalData, setRentalData] = useState({});
  const [currentDate, setCurrentDate] = useState(new Date().toISOString().split('T')[0]);
  const navigate = useNavigate();
  const [searchQuery, setSearchQuery] = useState("");
  const [searchParams] = useSearchParams();
  const genreId = searchParams.get("genreId");

  useEffect(() => {
    if (genreId) {
      handleGenreFilter(Number(genreId)); // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É
    }
  }, [genreId]);

  useEffect(() => {
    const fetchGenres = async () => {
      try {
        const data = await fetchWithAuth("/genres");
        setGenres(data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏–∑ API
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∞–Ω—Ä–æ–≤:", err);
      }
    };

    fetchGenres();
  }, []);

  useEffect(() => {
    const fetchBooks = async () => {
      try {
        const data = await fetchWithAuth("/books");
        setBooks(data);
        setFilteredBooks(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchBooks();
  }, []);

  const handleGenreFilter = async (genreId) => {
    setSelectedGenre(genreId);
    navigate('/books?genreId=${genreId}');

    if (!genreId) {
      setFilteredBooks(books); // –ï—Å–ª–∏ "–í—Å–µ –∂–∞–Ω—Ä—ã", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
      return;
    }

    try {
      const filteredBooks = await fetchWithAuth('/books?genreId=${genreId}');
      setFilteredBooks(filteredBooks);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –ø–æ –∂–∞–Ω—Ä—É:", err);
    }
  };

  useEffect(() => {
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      setCart(new Set(savedCart.split(',').map(id => Number(id))));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('cart', [...cart].join(','));
  }, [cart]);

  const handleRentBook = (book) => {
    setSelectedBook(book);
  };

  const debounce = (func, delay) => {
    let timeoutId;
    return (...args) => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => func(...args), delay);
    };
  };

  const fetchBooks = async (query) => {
    setLoading(true);
    try {
      const data = await fetchWithAuth('/books?query=${query}');
      setFilteredBooks(data);  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
    } catch (err) {
      setError('–û—à–∏–±–∫–∞: ${err.message}');
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const handleSearch = (query) => {
    setSearchQuery(query);
    const filtered = books.filter(book =>
      book.title.toLowerCase().includes(query.toLowerCase()) ||
      book.authorName.toLowerCase().includes(query.toLowerCase())
    );
    setFilteredBooks(filtered);
  };

  const handleSearchChange = (event) => {
    const query = event.target.value;
    handleSearch(query); // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–Ω–∏–≥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
  };

  const confirmRentBook = () => {
    if (selectedBook) {
      const startDate = rentalData[selectedBook.id]?.startDate || currentDate;
      const rentalWeeks = rentalData[selectedBook.id]?.rentalWeeks || 1;

      const start = new Date(startDate);
      const endDate = new Date(start);
      endDate.setDate(start.getDate() + rentalWeeks * 7);

      const rentalCost = (selectedBook.price * rentalWeeks).toFixed(1);

      const bookRentalData = {
        id: selectedBook.id,
        title: selectedBook.title,
        authorName: selectedBook.authorName,
        price: selectedBook.price,
        startDate,
        endDate: endDate.toISOString().split('T')[0],
        rentalWeeks,
        rentalCost,
      };

      const existingRentalData = JSON.parse(localStorage.getItem("rentalData")) || [];
      const updatedRentalData = [...existingRentalData, bookRentalData];
      localStorage.setItem("rentalData", JSON.stringify(updatedRentalData));

      setCart((prevCart) => new Set([...prevCart, selectedBook.id]));

      setSelectedBook(null);
    }
  };

  const handleBookClick = (id) => {
    navigate('/book/${id}');
  };

  const handleCartClick = () => {
    const cartIds = [...cart].join(',');
    navigate('/cart?bookIds=${cartIds}');
  };

  const handleDateChange = (bookId, newDate) => {
    setRentalData((prevData) => ({
      ...prevData,
      [bookId]: {
        ...prevData[bookId],
        startDate: newDate,
      },
    }));
  };

  const handleWeeksChange = (bookId, newWeeks) => {
    setRentalData((prevData) => ({
      ...prevData,
      [bookId]: {
        ...prevData[bookId],
        rentalWeeks: newWeeks,
      },
    }));
  };

  const calculateCost = (startDate, rentalWeeks, price) => {
    const start = new Date(startDate);
    const end = new Date(start);
    end.setDate(start.getDate() + rentalWeeks * 7);

    const rentalCost = price * rentalWeeks;
    return rentalCost.toFixed(1);
  };

  if (loading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (error) {
    return <div>–û—à–∏–±–∫–∞: {error}</div>;
  }

  return (
    <div className={styles.bookCatalog}>

      <header className={styles.catalogHeader}>
        <div>–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥</div>
        <div className={styles.searchContainer}>
          <input
            type="text"
            value={searchQuery}
            onChange={handleSearchChange}
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É"
            className={styles.searchInput}
          />
        </div>
        <div className={styles.iconsContainer}>
          <div className={styles.icon} onClick={handleCartClick}>
            üõí {cart.size > 0 && <span className={styles.cartCount}>{cart.size}</span>}
          </div>
          <div className={styles.icon}>
            üë§
          </div>
        </div>
      </header>

      <div className={styles.catalogContent}>
        <aside className={styles.genreFilter}>
          <h3>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä—É</h3>
          <ul>
            <li
              className={!selectedGenre ? styles.active : ""}
              onClick={() => handleGenreFilter(null)}
            >
              –í—Å–µ –∂–∞–Ω—Ä—ã
            </li>
            {genres.map(({ id, name }) => (
              <li
                key={id}
                className={selectedGenre === id ? styles.active : ""}
                onClick={() => handleGenreFilter(id)}
              >
                {name}
              </li>
            ))}
          </ul>
        </aside>
        <div className={styles.bookList}>
          {Array.from({ length: Math.ceil(filteredBooks.length / 4) }).map((_, rowIndex) => {
            const rowBooks = filteredBooks.slice(rowIndex * 4, (rowIndex + 1) * 4);
            const emptyBlocks = 4 - rowBooks.length; // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö –±–ª–æ–∫–æ–≤ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å

            return (
              <div className={styles.bookRow} key={rowIndex}>
                {rowBooks.map((book) => (
                  <div
                    className={styles.bookItem}
                    key={book.id}
                    onClick={() => handleBookClick(book.id)} // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –≤–µ—Å—å –±–ª–æ–∫
                  >
                    <img
                      src={book.images?.[0]}
                      alt={book.title}
                      className={styles.bookImage}
                    />
                    <div className={styles.bookInfo}>
                      <h2 className={styles.bookTitle}>{book.title}</h2>
                      <p className={styles.bookAuthor}>{book.authorName}, {book.publicationYear}</p>
                      <div className={styles.buttonWrapper}>
                        <button
                          className='{${styles.rentButton} ${cart.has(book.id) ? styles.inCart : ""}}'
                          onClick={(e) => {
                            e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏
                            handleRentBook(book);
                          }}
                          disabled={cart.has(book.id)}
                        >
                          {cart.has(book.id) ? "–í –∫–æ—Ä–∑–∏–Ω–µ" : "–í–∑—è—Ç—å –≤ –∞—Ä–µ–Ω–¥—É"}
                        </button>
                      </div>
                    </div>
                  </div>
                ))}

                {Array.from({ length: emptyBlocks }).map((_, emptyIndex) => (
                  <div className={styles.emptyItem} key={emptyIndex}></div>
                ))}
              </div>
            );
          })}
        </div>
      </div>

      {selectedBook && (
        <div className={styles.rentConfirmation}>
          <div className={styles.rentConfirmationContent}>
            <h3>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞—Ä–µ–Ω–¥—É</h3>

            <div>
              <h2 className={styles.cartItemTitle}>
                {selectedBook.title}, {selectedBook.authorName}
              </h2>
            </div>

            <div className={styles.inputGroup}>
              <label>
                –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã:
                <input
                  type="date"
                  defaultValue={rentalData[selectedBook.id]?.startDate || currentDate}
                  onChange={(e) => handleDateChange(selectedBook.id, e.target.value)}
                />
              </label>

              <label>
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å:
                <input
                  type="number"
                  value={rentalData[selectedBook.id]?.rentalWeeks || 1}
                  onChange={(e) => handleWeeksChange(selectedBook.id, e.target.value)}
                  min="1"
                  max="10"
                  step="1"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å"
                />
              </label>

              <div className={styles.cartItemPrice}>
                –°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã —Å{" "}
                <strong>{new Date(rentalData[selectedBook.id]?.startDate || currentDate).toLocaleDateString()}</strong> –¥–æ{" "}
                <strong>{new Date(new Date(rentalData[selectedBook.id]?.startDate || currentDate).getTime() + (rentalData[selectedBook.id]?.rentalWeeks || 1) * 7 * 24 * 60 * 60 * 1000).toLocaleDateString()}</strong> —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç{" "}
                <strong>{calculateCost(rentalData[selectedBook.id]?.startDate || currentDate, rentalData[selectedBook.id]?.rentalWeeks || 1, selectedBook.price)} ‚ÇΩ</strong>
              </div>
            </div>

            <div>
              <button className={styles.confirmButton} onClick={confirmRentBook}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
              <button className={styles.cancelButton} onClick={() => setSelectedBook(null)}>–û—Ç–º–µ–Ω–∞</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BookCatalogPage;